type CvReview {
  comments: String
  createdBy: String!
  fileName: String
  id: ID!
  lastUpdatedBy: String
  reviewedBy: String
  status: CvReviewStatus
}

enum CvReviewStatus {
  submitted
  underReview
  reviewCompleted
}

type pricingPlans {
  name: String
  availableCvReviews: Int
  Price: Int
}

type User {
  cvReviewsTaken: Int
  email: AWSEmail
  groups: AWSJSON
  id: ID!
  phone_number: AWSPhone
  username: String
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelCvReviewConnection {
  items: [CvReview]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelCvReviewStatusFilterInput {
  eq: CvReviewStatus
  ne: CvReviewStatus
}

input ModelCvReviewFilterInput {
  comments: ModelStringFilterInput
  createdBy: ModelStringFilterInput
  fileName: ModelStringFilterInput
  id: ModelIDFilterInput
  lastUpdatedBy: ModelStringFilterInput
  reviewedBy: ModelStringFilterInput
  status: ModelCvReviewStatusFilterInput
  and: [ModelCvReviewFilterInput]
  or: [ModelCvReviewFilterInput]
  not: ModelCvReviewFilterInput
}

type Query {
  getCvReview(id: ID!): CvReview
  listCvReviews(filter: ModelCvReviewFilterInput, limit: Int, nextToken: String): ModelCvReviewConnection
  getPricingPlans(id: ID!): pricingPlans
  listPricingPlanss(filter: ModelpricingPlansFilterInput, limit: Int, nextToken: String): ModelpricingPlansConnection
  getUser(id: ID!): User
  listUsers(filter: ModelUserFilterInput, limit: Int, nextToken: String): ModelUserConnection
}

input CreateCvReviewInput {
  comments: String
  createdBy: String!
  fileName: String
  id: ID
  lastUpdatedBy: String
  reviewedBy: String
  status: CvReviewStatus
}

input UpdateCvReviewInput {
  comments: String
  createdBy: String
  fileName: String
  id: ID!
  lastUpdatedBy: String
  reviewedBy: String
  status: CvReviewStatus
}

input DeleteCvReviewInput {
  id: ID
}

type Mutation {
  createCvReview(input: CreateCvReviewInput!): CvReview
  updateCvReview(input: UpdateCvReviewInput!): CvReview
  deleteCvReview(input: DeleteCvReviewInput!): CvReview
  createPricingPlans(input: CreatePricingPlansInput!): pricingPlans
  updatePricingPlans(input: UpdatePricingPlansInput!): pricingPlans
  deletePricingPlans(input: DeletePricingPlansInput!): pricingPlans
  createUser(input: CreateUserInput!): User
  updateUser(input: UpdateUserInput!): User
  deleteUser(input: DeleteUserInput!): User
}

type Subscription {
  onCreateCvReview: CvReview @aws_subscribe(mutations: ["createCvReview"])
  onUpdateCvReview: CvReview @aws_subscribe(mutations: ["updateCvReview"])
  onDeleteCvReview: CvReview @aws_subscribe(mutations: ["deleteCvReview"])
  onCreatePricingPlans: pricingPlans @aws_subscribe(mutations: ["createPricingPlans"])
  onUpdatePricingPlans: pricingPlans @aws_subscribe(mutations: ["updatePricingPlans"])
  onDeletePricingPlans: pricingPlans @aws_subscribe(mutations: ["deletePricingPlans"])
  onCreateUser: User @aws_subscribe(mutations: ["createUser"])
  onUpdateUser: User @aws_subscribe(mutations: ["updateUser"])
  onDeleteUser: User @aws_subscribe(mutations: ["deleteUser"])
}

type ModelpricingPlansConnection {
  items: [pricingPlans]
  nextToken: String
}

input ModelpricingPlansFilterInput {
  name: ModelStringFilterInput
  availableCvReviews: ModelIntFilterInput
  Price: ModelIntFilterInput
  and: [ModelpricingPlansFilterInput]
  or: [ModelpricingPlansFilterInput]
  not: ModelpricingPlansFilterInput
}

input CreatePricingPlansInput {
  name: String
  availableCvReviews: Int
  Price: Int
}

input UpdatePricingPlansInput {
  name: String
  availableCvReviews: Int
  Price: Int
}

input DeletePricingPlansInput {
  id: ID
}

type ModelUserConnection {
  items: [User]
  nextToken: String
}

input ModelUserFilterInput {
  cvReviewsTaken: ModelIntFilterInput
  email: ModelStringFilterInput
  groups: ModelStringFilterInput
  id: ModelIDFilterInput
  phone_number: ModelStringFilterInput
  username: ModelStringFilterInput
  and: [ModelUserFilterInput]
  or: [ModelUserFilterInput]
  not: ModelUserFilterInput
}

input CreateUserInput {
  cvReviewsTaken: Int
  email: AWSEmail
  groups: AWSJSON
  id: ID
  phone_number: AWSPhone
  username: String
}

input UpdateUserInput {
  cvReviewsTaken: Int
  email: AWSEmail
  groups: AWSJSON
  id: ID!
  phone_number: AWSPhone
  username: String
}

input DeleteUserInput {
  id: ID
}
